# THIS CODE IS COMPLETELY GENERATED BY AI

import os
import time
import pdfplumber
import docx
import openpyxl
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class FileConverterHandler(FileSystemEventHandler):
    def __init__(self, folder_to_watch):
        self.folder_to_watch = folder_to_watch

    def on_created(self, event):
        if not event.is_directory:
            file_path = event.src_path
            self.convert_to_txt(file_path)

    def convert_to_txt(self, file_path):
        """Detect file type and convert to .txt"""
        filename, ext = os.path.splitext(file_path)
        txt_file = f"{filename}.txt"

        try:
            if ext.lower() == ".pdf":
                self.convert_pdf_to_txt(file_path, txt_file)
            elif ext.lower() in [".docx", ".doc"]:
                self.convert_docx_to_txt(file_path, txt_file)
            elif ext.lower() == ".xlsx":
                self.convert_xlsx_to_txt(file_path, txt_file)
            else:
                print(f"Unsupported file type: {ext}")
        except Exception as e:
            print(f"Error converting {file_path}: {e}")

    def convert_pdf_to_txt(self, pdf_path, txt_path):
        """Extract text from PDF and save as .txt"""
        with pdfplumber.open(pdf_path) as pdf:
            text = "\n".join(page.extract_text() for page in pdf.pages if page.extract_text())
        self.save_text(txt_path, text)

    def convert_docx_to_txt(self, docx_path, txt_path):
        """Extract text from Word (.docx/.doc) file and save as .txt"""
        doc = docx.Document(docx_path)
        text = "\n".join([para.text for para in doc.paragraphs])
        self.save_text(txt_path, text)

    def convert_xlsx_to_txt(self, xlsx_path, txt_path):
        """Extract text from Excel (.xlsx) file and save as .txt"""
        wb = openpyxl.load_workbook(xlsx_path)
        text = []
        for sheet in wb.worksheets:
            for row in sheet.iter_rows(values_only=True):
                text.append("\t".join(str(cell) if cell is not None else "" for cell in row))
        self.save_text(txt_path, "\n".join(text))

    def save_text(self, txt_path, text):
        """Save extracted text to a .txt file"""
        with open(txt_path, "w", encoding="utf-8") as f:
            f.write(text)
        print(f"Converted and saved: {txt_path}")

def monitor_folder(folder_path):
    """Start monitoring the folder for new files"""
    event_handler = FileConverterHandler(folder_path)
    observer = Observer()
    observer.schedule(event_handler, folder_path, recursive=False)
    observer.start()
    print(f"Monitoring folder: {folder_path}")

    try:
        while True:
            time.sleep(2)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()


folder_to_watch = "/Users/eagle/Developer/archon/archonX/archon/docs"
monitor_folder(folder_to_watch)